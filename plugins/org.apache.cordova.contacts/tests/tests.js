exports.defineAutoTests=function(){var e=null,t="windowsphone"==cordova.platformId,n="windows"===cordova.platformId||"windows8"===cordova.platformId,o=n&&WinJS.Utilities.isPhone,c=function(e){expect(!0).toBe(!1),e()},a=function(){e&&(e.remove(function(){},function(){console.log("[CONTACTS ERROR]: removeContact cleanup method failed to clean up test artifacts.")}),e=null)};describe("Contacts (navigator.contacts)",function(){it("contacts.spec.1 should exist",function(){expect(navigator.contacts).toBeDefined()}),it("contacts.spec.2 should contain a find function",function(){expect(navigator.contacts.find).toBeDefined(),expect(typeof navigator.contacts.find).toBe("function")}),describe("find method",function(){it("contacts.spec.3 success callback should be called with an array",function(e){if(n&&!o)return void pending();var t=function(t){expect(t).toBeDefined(),expect(t instanceof Array).toBe(!0),e()},a=new ContactFindOptions;a.filter="",a.multiple=!0,navigator.contacts.find(["displayName","name","phoneNumbers","emails"],t,c.bind(null,e),a)}),it("success callback should be called with an array, even if partial ContactFindOptions specified",function(e){if(n&&!o)return void pending();var t=function(t){expect(t).toBeDefined(),expect(t instanceof Array).toBe(!0),e()};navigator.contacts.find(["displayName","name","phoneNumbers","emails"],t,c.bind(null,e),{multiple:!0})}),it("contacts.spec.4 should throw an exception if success callback is empty",function(){var e=new ContactFindOptions;e.filter="",e.multiple=!0,expect(function(){navigator.contacts.find(["displayName","name","emails","phoneNumbers"],null,c.bind(null,done),e)}).toThrow()}),it("contacts.spec.5 error callback should be called when no fields are specified",function(e){var t=c,n=function(t){expect(t).toBeDefined(),expect(t.code).toBe(ContactError.INVALID_ARGUMENT_ERROR),e()},o=new ContactFindOptions;o.filter="",o.multiple=!0,navigator.contacts.find([],t,n,o)}),describe("with newly-created contact",function(){afterEach(a),it("contacts.spec.6 should be able to find a contact by name",function(o){if(n)return void pending();if(t)return void o();var a=function(e){var t=!1;try{for(var n=0;n<e.length;n++)if("Delete"==e[n].name.familyName){t=!0;break}}catch(o){return!1}return t},i=function(t){e=t;var n=function(e){console.log("in findwin"),expect(e instanceof Array).toBe(!0),expect(e.length>=1).toBe(!0),expect(a(e)).toBe(!0),o()},i=c,r=new ContactFindOptions;r.filter="Delete",r.multiple=!0,navigator.contacts.find(["displayName","name","phoneNumbers","emails"],n,i.bind(null,o),r)};e=new Contact,e.name=new ContactName,e.name.familyName="Delete",e.save(i,c.bind(null,o))})})}),describe("create method",function(){it("contacts.spec.1 should exist",function(){expect(navigator.contacts.create).toBeDefined(),expect(typeof navigator.contacts.create).toBe("function")}),it("contacts.spec.8 should return a Contact object",function(){var e=new Date(1976,7,4),t=navigator.contacts.create({displayName:"test name",gender:"male",note:"my note",name:{formatted:"Mr. Test Name"},emails:[{value:"here@there.com"},{value:"there@here.com"}],birthday:e});expect(t).toBeDefined(),expect(t.displayName).toBe("test name"),expect(t.note).toBe("my note"),expect(t.name.formatted).toBe("Mr. Test Name"),expect(t.emails.length).toBe(2),expect(t.emails[0].value).toBe("here@there.com"),expect(t.emails[1].value).toBe("there@here.com"),expect(t.nickname).toBe(null),expect(t.birthday).toBe(e)})}),describe("Contact object",function(){it("contacts.spec.9 should be able to create instance",function(){var e=new Contact("a","b",new ContactName("a","b","c","d","e","f"),"c",[],[],[],[],[],"f","i",[],[],[]);expect(e).toBeDefined(),expect(e.id).toBe("a"),expect(e.displayName).toBe("b"),expect(e.name.formatted).toBe("a"),expect(e.nickname).toBe("c"),expect(e.phoneNumbers).toBeDefined(),expect(e.emails).toBeDefined(),expect(e.addresses).toBeDefined(),expect(e.ims).toBeDefined(),expect(e.organizations).toBeDefined(),expect(e.birthday).toBe("f"),expect(e.note).toBe("i"),expect(e.photos).toBeDefined(),expect(e.categories).toBeDefined(),expect(e.urls).toBeDefined()}),it("contacts.spec.10 should be able to define a ContactName object",function(){var e=new ContactName("Dr. First Last Jr.","Last","First","Middle","Dr.","Jr.");expect(e).toBeDefined(),expect(e.formatted).toBe("Dr. First Last Jr."),expect(e.familyName).toBe("Last"),expect(e.givenName).toBe("First"),expect(e.middleName).toBe("Middle"),expect(e.honorificPrefix).toBe("Dr."),expect(e.honorificSuffix).toBe("Jr.")}),it("contacts.spec.11 should be able to define a ContactField object",function(){var e=new ContactField("home","8005551212",!0);expect(e).toBeDefined(),expect(e.type).toBe("home"),expect(e.value).toBe("8005551212"),expect(e.pref).toBe(!0)}),it("contacts.spec.12 ContactField object should coerce type and value properties to strings",function(){var e=new ContactField(12345678,12345678,!0);expect(e.type).toBe("12345678"),expect(e.value).toBe("12345678")}),it("contacts.spec.13 should be able to define a ContactAddress object",function(){var e=new ContactAddress(!0,"home","a","b","c","d","e","f");expect(e).toBeDefined(),expect(e.pref).toBe(!0),expect(e.type).toBe("home"),expect(e.formatted).toBe("a"),expect(e.streetAddress).toBe("b"),expect(e.locality).toBe("c"),expect(e.region).toBe("d"),expect(e.postalCode).toBe("e"),expect(e.country).toBe("f")}),it("contacts.spec.14 should be able to define a ContactOrganization object",function(){var e=new ContactOrganization(!0,"home","a","b","c","d","e","f","g");expect(e).toBeDefined(),expect(e.pref).toBe(!0),expect(e.type).toBe("home"),expect(e.name).toBe("a"),expect(e.department).toBe("b"),expect(e.title).toBe("c")}),it("contacts.spec.15 should be able to define a ContactFindOptions object",function(){var e=new ContactFindOptions("a",!0,"b");expect(e).toBeDefined(),expect(e.filter).toBe("a"),expect(e.multiple).toBe(!0)}),it("contacts.spec.16 should contain a clone function",function(){var e=new Contact;expect(e.clone).toBeDefined(),expect(typeof e.clone).toBe("function")}),it("contacts.spec.17 clone function should make deep copy of Contact Object",function(){var e=new Contact;e.id=1,e.displayName="Test Name",e.nickname="Testy",e.gender="male",e.note="note to be cloned",e.name=new ContactName("Mr. Test Name");var t=e.clone();expect(e.id).toBe(1),expect(t.id).toBe(null),expect(t.displayName).toBe(e.displayName),expect(t.nickname).toBe(e.nickname),expect(t.gender).toBe(e.gender),expect(t.note).toBe(e.note),expect(t.name.formatted).toBe(e.name.formatted),expect(t.connected).toBe(e.connected)}),it("contacts.spec.18 should contain a save function",function(){var e=new Contact;expect(e.save).toBeDefined(),expect(typeof e.save).toBe("function")}),it("contacts.spec.19 should contain a remove function",function(){var e=new Contact;expect(e.remove).toBeDefined(),expect(typeof e.remove).toBe("function")})}),describe("save method",function(){it("contacts.spec.20 should be able to save a contact",function(o){if(n)return void pending();if(t)return void o();var a=new Date(1976,6,4);e=navigator.contacts.create({gender:"male",note:"my note",name:{familyName:"Delete",givenName:"Test"},emails:[{value:"here@there.com"},{value:"there@here.com"}],birthday:a});var i=function(t){expect(t).toBeDefined(),expect(t.note).toBe("my note"),expect(t.name.familyName).toBe("Delete"),expect(t.name.givenName).toBe("Test"),expect(t.emails.length).toBe(2),expect(t.emails[0].value).toBe("here@there.com"),expect(t.emails[1].value).toBe("there@here.com"),expect(t.birthday.toDateString()).toBe(a.toDateString()),expect(t.addresses).toBe(null),e=t,o()},r=c;e.save(i,r)}),it("contacts.spec.21 update a contact",function(o){if(n)return void pending();if(t)return void o();expect(e).toBeDefined();var c=new Date(1975,5,4),i="an UPDATED note",r=function(t){expect(t).toBeDefined(),expect(t.id).toBe(e.id),expect(t.note).toBe(i),expect(t.birthday.toDateString()).toBe(c.toDateString()),expect(t.emails.length).toBe(1),expect(t.emails[0].value).toBe("here@there.com"),a(),o()},s=function(){a(),s(o)};e.emails[1].value="",e.birthday=c,e.note=i,e.save(r,s)})}),describe("Contact.remove method",function(){afterEach(a),it("contacts.spec.22 calling remove on a contact has an id of null should return ContactError.UNKNOWN_ERROR",function(e){var t=function(){},n=function(t){expect(t.code).toBe(ContactError.UNKNOWN_ERROR),e()},o=new Contact;o.remove(t,n)}),it("contacts.spec.23 calling remove on a contact that does not exist should return ContactError.UNKNOWN_ERROR",function(e){var t=c,n=function(t){expect(t.code).toBe(ContactError.UNKNOWN_ERROR),e()},o=(new Contact,new Contact("this string is supposed to be a unique identifier that will never show up on a device"));o.remove(t,n)})}),describe("Round trip Contact tests (creating + save + delete + find).",function(){afterEach(a),it("contacts.spec.24 Creating, saving, finding a contact should work, removing it should work, after which we should not be able to find it, and we should not be able to delete it again.",function(o){return n?void pending():t?void o():(e=new Contact,e.name=new ContactName,e.name.familyName="DeleteMe",void e.save(function(){var t=function(t){expect(t.length).toBe(1),e=t[0],e.remove(function(){var t=function(t){expect(t.length).toBe(0),e.remove(function(){throw"success callback called after non-existent Contact object called remove(). Test failed."},function(e){expect(e.code).toBe(ContactError.UNKNOWN_ERROR),o()})},n=function(){throw"find error callback invoked after delete, test failed."},c=new ContactFindOptions;c.filter="DeleteMe",c.multiple=!0,navigator.contacts.find(["displayName","name","phoneNumbers","emails"],t,n,c)},function(){throw"Newly created contact's remove function invoked error callback. Test failed."})},n=c,a=new ContactFindOptions;a.filter="DeleteMe",a.multiple=!0,navigator.contacts.find(["displayName","name","phoneNumbers","emails"],t,n,a)},c))})}),describe("ContactError interface",function(){it("contacts.spec.25 ContactError constants should be defined",function(){expect(ContactError.UNKNOWN_ERROR).toBe(0),expect(ContactError.INVALID_ARGUMENT_ERROR).toBe(1),expect(ContactError.TIMEOUT_ERROR).toBe(2),expect(ContactError.PENDING_OPERATION_ERROR).toBe(3),expect(ContactError.IO_ERROR).toBe(4),expect(ContactError.NOT_SUPPORTED_ERROR).toBe(5),expect(ContactError.PERMISSION_DENIED_ERROR).toBe(20)})})})},exports.defineManualTests=function(e,t){function n(){var e=document.getElementById("contact_results");obj=new ContactFindOptions,obj.multiple=!0,navigator.contacts.find(["displayName","name","phoneNumbers","emails","urls","note"],function(t){var n="";if(0==t.length)n="No contacts found";else{n="Number of contacts: "+t.length+"<br><table width='100%'><tr><th>Name</th><td>Phone</td><td>Email</td></tr>";for(var o=0;o<t.length;o++){var c=t[o];n=n+"<tr><td>"+c.name.formatted+"</td><td>",c.phoneNumbers&&c.phoneNumbers.length>0&&(n+=c.phoneNumbers[0].value),n+="</td><td>",c.emails&&c.emails.length>0&&(n+=c.emails[0].value),n+="</td></tr>"}n+="</table>"}e.innerHTML=n},function(t){e.innerHTML=t.code===ContactError.NOT_SUPPORTED_ERROR?"Searching for contacts is not supported.":"Search failed: error "+t.code},obj)}function o(){var e=document.getElementById("contact_results");try{var t=navigator.contacts.create({displayName:"Dooney Evans"}),n={formatted:"Dooney Evans",familyName:"Evans",givenName:"Dooney",middleName:""};t.name=n;var o=[1];o[0]=new ContactField("work","512-555-1234",!0),t.phoneNumbers=o,t.save(function(){e.innerHTML="Contact saved."},function(t){e.innerHTML=t.code===ContactError.NOT_SUPPORTED_ERROR?"Saving contacts not supported.":"Contact save failed: error "+t.code})}catch(c){alert(c)}}e.innerHTML='<div id="info"><b>Results:</b><br><div id="contact_results"></div></div><div id="get_contacts"></div>Expected result: Status box will show number of contacts and list them. May be empty on a fresh device until you click Add.</p> <div id="add_contact"></div>Expected result: Will add a new contact. Log will say "Contact saved." or "Saving contacts not supported." if not supported on current platform. Verify by running Get phone contacts again',t("Get phone's contacts",function(){n()},"get_contacts"),t("Add a new contact 'Dooney Evans'",function(){o()},"add_contact")};