exports.defineAutoTests=function(){describe("Accelerometer (navigator.accelerometer)",function(){var e=function(e){expect(!0).toBe(!1),e()};it("accelerometer.spec.1 should exist",function(){expect(navigator.accelerometer).toBeDefined()}),describe("getCurrentAcceleration",function(){it("accelerometer.spec.2 should exist",function(){expect(typeof navigator.accelerometer.getCurrentAcceleration).toBeDefined(),expect("function"==typeof navigator.accelerometer.getCurrentAcceleration).toBe(!0)}),it("accelerometer.spec.3 success callback should be called with an Acceleration object",function(t){var c=function(e){expect(e).toBeDefined(),expect(e.x).toBeDefined(),expect("number"==typeof e.x).toBe(!0),expect(e.y).toBeDefined(),expect("number"==typeof e.y).toBe(!0),expect(e.z).toBeDefined(),expect("number"==typeof e.z).toBe(!0),expect(e.timestamp).toBeDefined(),expect(typeof e.timestamp).toBe("number"),t()};navigator.accelerometer.getCurrentAcceleration(c,e.bind(null,t))}),it("accelerometer.spec.4 success callback Acceleration object should have (reasonable) values for x, y and z expressed in m/s^2",function(t){var c=15,n=function(e){expect(e.x).toBeLessThan(c),expect(e.x).toBeGreaterThan(-1*c),expect(e.y).toBeLessThan(c),expect(e.y).toBeGreaterThan(-1*c),expect(e.z).toBeLessThan(c),expect(e.z).toBeGreaterThan(-1*c),t()};navigator.accelerometer.getCurrentAcceleration(n,e.bind(null,t))}),it("accelerometer.spec.5 success callback Acceleration object should return a recent timestamp",function(t){var c=(new Date).getTime(),n=c+5e3,a=function(e){expect(e.timestamp).toBeGreaterThan(c),expect(e.timestamp).toBeLessThan(n),t()};navigator.accelerometer.getCurrentAcceleration(a,e.bind(null,t))})}),describe("watchAcceleration",function(){var t;afterEach(function(){navigator.accelerometer.clearWatch(t)}),it("accelerometer.spec.6 should exist",function(){expect(navigator.accelerometer.watchAcceleration).toBeDefined(),expect("function"==typeof navigator.accelerometer.watchAcceleration).toBe(!0)}),it("accelerometer.spec.7 success callback should be called with an Acceleration object",function(c){var n=function(e){expect(e).toBeDefined(),expect(e.x).toBeDefined(),expect("number"==typeof e.x).toBe(!0),expect(e.y).toBeDefined(),expect("number"==typeof e.y).toBe(!0),expect(e.z).toBeDefined(),expect("number"==typeof e.z).toBe(!0),expect(e.timestamp).toBeDefined(),expect(typeof e.timestamp).toBe("number"),c()};t=navigator.accelerometer.watchAcceleration(n,e.bind(null,c),{frequency:100})}),it("accelerometer.spec.8 success callback Acceleration object should have (reasonable) values for x, y and z expressed in m/s^2",function(c){var n=15,a=function(e){expect(e.x).toBeLessThan(n),expect(e.x).toBeGreaterThan(-1*n),expect(e.y).toBeLessThan(n),expect(e.y).toBeGreaterThan(-1*n),expect(e.z).toBeLessThan(n),expect(e.z).toBeGreaterThan(-1*n),c()};t=navigator.accelerometer.watchAcceleration(a,e.bind(null,c),{frequency:100})}),it("accelerometer.spec.9 success callback Acceleration object should return a recent timestamp",function(c){var n=(new Date).getTime(),a=n+5e3,o=function(e){expect(e.timestamp).toBeGreaterThan(n),expect(e.timestamp).toBeLessThan(a),c()};t=navigator.accelerometer.watchAcceleration(o,e.bind(null,c),{frequency:100})})}),describe("clearWatch",function(){it("accelerometer.spec.10 should exist",function(){expect(navigator.accelerometer.clearWatch).toBeDefined(),expect("function"==typeof navigator.accelerometer.clearWatch).toBe(!0)}),it("accelerometer.spec.11 should clear an existing watch",function(t){var c,n=function(){navigator.accelerometer.clearWatch(c);var a=setTimeout(function(){expect(!0).toBe(!0),t()},101);n=function(){clearTimeout(a),e(t)}};c=navigator.accelerometer.watchAcceleration(function(){n()},e.bind(null,t),{frequency:100})})})})},exports.defineManualTests=function(e,t){function c(e){var t=3,c=Math.round(e*Math.pow(10,t))/Math.pow(10,t);return c}var n=null,a=function(){console.log("watchAccel()");var e=function(e){document.getElementById("x").innerHTML=c(e.x),document.getElementById("y").innerHTML=c(e.y),document.getElementById("z").innerHTML=c(e.z)},t=function(e){console.log("watchAccel fail callback with error code "+e),o(),i(Accelerometer.ERROR_MSG[e])},a={};a.frequency=1e3,n=navigator.accelerometer.watchAcceleration(e,t,a),i("Running")},o=function(){console.log("stopAccel()"),i("Stopped"),n&&(navigator.accelerometer.clearWatch(n),n=null)},r=function(){console.log("getAccel()"),o();var e=function(e){document.getElementById("x").innerHTML=c(e.x),document.getElementById("y").innerHTML=c(e.y),document.getElementById("z").innerHTML=c(e.z),console.log("getAccel success callback")},t=function(e){console.log("getAccel fail callback with error code "+e),i(Accelerometer.ERROR_MSG[e])},n={};navigator.accelerometer.getCurrentAcceleration(e,t,n)},i=function(e){document.getElementById("accel_status").innerHTML=e},l='<div id="getAcceleration"></div>Expected result: Will update the status box with X, Y, and Z values when pressed. Status will read "Stopped"<p/> <div id="watchAcceleration"></div>Expected result: When pressed, will start a watch on the accelerometer and update X,Y,Z values when movement is sensed. Status will read "Running"<p/> <div id="clearAcceleration"></div>Expected result: Will clear the accelerometer watch, so X,Y,Z values will no longer be updated. Status will read "Stopped"';e.innerHTML='<div id="info">Status: <span id="accel_status">Stopped</span><table width="100%"><tr><td width="20%">X:</td><td id="x"> </td></tr><tr><td width="20%">Y:</td><td id="y"> </td></tr><tr><td width="20%">Z:</td><td id="z"> </td></tr></table></div>'+l,t("Get Acceleration",function(){r()},"getAcceleration"),t("Start Watch",function(){a()},"watchAcceleration"),t("Clear Watch",function(){o()},"clearAcceleration")};