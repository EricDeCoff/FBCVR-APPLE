exports.defineAutoTests=function(){var e=function(e,t){t="string"!=typeof t?"Forced failure: wrong callback called":t,expect(!0).toFailWithMessage(t),e()},t="Forced failure: error callback should not have been called";describe("Compass (navigator.compass)",function(){var a=!1;beforeEach(function(){jasmine.Expectation.addMatchers({toFailWithMessage:function(){return{compare:function(e,t){var a=!1;return void 0===t&&(t="Forced failure: wrong callback called"),{pass:a,message:t}}}}})}),it("compass.hardwarecheck is compass supported",function(e){navigator.compass.getCurrentHeading(function(){e()},function(t){t.code==CompassError.COMPASS_NOT_SUPPORTED&&(a=!0,expect(this).toFailWithMessage("The device does not have compass support. Any tests relying on support will be marked pending.")),e()})}),it("compass.spec.1 should exist",function(){console.log("In spec 1"),expect(navigator.compass).toBeDefined()}),it("compass.spec.2 should contain a getCurrentHeading function",function(){expect(navigator.compass.getCurrentHeading).toBeDefined(),expect("function"==typeof navigator.compass.getCurrentHeading).toBe(!0)}),it("compass.spec.3 getCurrentHeading success callback should be called with a Heading object",function(n){a&&pending(),navigator.compass.getCurrentHeading(function(e){expect(e instanceof CompassHeading).toBe(!0),expect(e.magneticHeading).toBeDefined(),expect("number"==typeof e.magneticHeading).toBe(!0),expect(e.trueHeading).not.toBe(void 0),expect("number"==typeof e.trueHeading||null===e.trueHeading).toBe(!0),expect(e.headingAccuracy).not.toBe(void 0),expect("number"==typeof e.headingAccuracy||null===e.headingAccuracy).toBe(!0),expect("number"==typeof e.timestamp).toBe(!0),n()},e.bind(null,n,t))}),it("compass.spec.4 should contain a watchHeading function",function(){expect(navigator.compass.watchHeading).toBeDefined(),expect("function"==typeof navigator.compass.watchHeading).toBe(!0)}),it("compass.spec.5 should contain a clearWatch function",function(){expect(navigator.compass.clearWatch).toBeDefined(),expect("function"==typeof navigator.compass.clearWatch).toBe(!0)}),describe("Compass Constants (window.CompassError)",function(){it("compass.spec.1 should exist",function(){expect(window.CompassError).toBeDefined(),expect(window.CompassError.COMPASS_INTERNAL_ERR).toBe(0),expect(window.CompassError.COMPASS_NOT_SUPPORTED).toBe(20)})}),describe("Compass Heading model (CompassHeading)",function(){it("compass.spec.1 should exist",function(){expect(CompassHeading).toBeDefined()}),it("compass.spec.8 should be able to create a new CompassHeading instance with no parameters",function(){var e=new CompassHeading;expect(e).toBeDefined(),expect(e.magneticHeading).toBeUndefined(),expect(e.trueHeading).toBeUndefined(),expect(e.headingAccuracy).toBeUndefined(),expect("number"==typeof e.timestamp).toBe(!0)}),it("compass.spec.9 should be able to create a new CompassHeading instance with parameters",function(){var e=new CompassHeading(1,2,3,4);expect(e.magneticHeading).toBe(1),expect(e.trueHeading).toBe(2),expect(e.headingAccuracy).toBe(3),expect(e.timestamp.valueOf()).toBe(4),expect("number"==typeof e.timestamp).toBe(!0)})})})},exports.defineManualTests=function(e,t){function a(e){var t=3,a=Math.round(e*Math.pow(10,t))/Math.pow(10,t);return a}var n=null,o=function(){console.log("watchCompass()");var e=function(e){document.getElementById("compassHeading").innerHTML=a(e.magneticHeading)},t=function(e){console.log("watchCompass fail callback with error code "+e),s(),c(e)};s();var o={};o.frequency=1e3,n=navigator.compass.watchHeading(e,t,o),c("Running")},s=function(){c("Stopped"),n&&(navigator.compass.clearWatch(n),n=null)},i=function(){console.log("getCompass()"),s();var e=function(e){document.getElementById("compassHeading").innerHTML=a(e.magneticHeading)},t=function(e){console.log("getCompass fail callback with error code "+e.toString),c(e)},n={};navigator.compass.getCurrentHeading(e,t,n)},c=function(e){document.getElementById("compass_status").innerHTML=e},p='<h3>iOS devices may bring up a calibration screen when initiating these tests</h3><div id="getCompass"></div>Expected result: Will update the status box with current heading. Status will read "Stopped"<p/> <div id="watchCompass"></div>Expected result: When pressed, will start a watch on the compass and update the heading value when heading changes. Status will read "Running"<p/> <div id="stopCompass"></div>Expected result: Will clear the compass watch, so heading value will no longer be updated. Status will read "Stopped"';e.innerHTML='<div id="info"><b>Status: </b><span id="compass_status">Stopped</span><table width="100%"><tr><td width="33%">Heading: <span id="compassHeading"></span></td></tr></table></div>'+p,t("Get Compass",function(){i()},"getCompass"),t("Start Watching Compass",function(){o()},"watchCompass"),t("Stop Watching Compass",function(){s()},"stopCompass")};